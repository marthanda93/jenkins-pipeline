pipeline {
    agent any
    stages {
        stage ('Clone') {
            steps {
                git url: 'https://github.com/spring-projects/spring-petclinic.git', branch: 'main'
            }
        }

        stage ('Initialize') {
            steps {
                sh '''
                    echo "PATH = ${PATH}"
                    echo "M2_HOME = ${M2_HOME}"
                '''
            }
        }

        stage ('Build') {
            steps {
                script {
                    try {
                        sh './mvnw package'
                    } catch (Exception e) {
                        echo 'Exception occurred: ' + e.toString()
                    }
                }
            }
        }

        stage ('Build App Image') {
            options { retry(3) }
            steps {
                script {
                    def dockerfile = "spring-petclinic/Dockerfile"
                    def registry = "169942349975.dkr.ecr.us-east-1.amazonaws.com"
                    def region = "us-east-1"
                    def app_name = "petclinic"

                    def TOKEN = sh(script: 'curl -sSLd "username=marthanda93&password=password" https://hub.docker.com/v2/users/login | jq -r ".token"', returnStdout: true)
                    def OUTPUT = sh(script: 'curl -sH "Authorization: JWT ' + TOKEN + '" "https://hub.docker.com/v2/repositories/marthanda93/es/tags/appB" | jq ".message" | grep "not found" | wc -l', returnStdout: true)

                    git url: 'https://github.com/marthanda93/jenkins-pipeline.git', branch: 'main'

                    if (OUTPUT == "0") {
                        echo 'Found'
                    } else {
                        sh(script: 'curl -sH "Authorization: JWT ' + TOKEN + '" "https://hub.docker.com/v2/repositories/marthanda93/es/tags/appB" | jq ".message"')

                        echo OUTPUT
                        echo "--------"

                        println OUTPUT.getClass()
                        println OUTPUT === "0"

                        // withAWS(credentials: 'aws-credentials', region: "${region}") {
                        //     sh "aws ecr get-login-password --region ${region} | docker login --username AWS --password-stdin ${registry}"

                        //     sh "docker build -t ${app_name}:${env.BUILD_ID} -f ${dockerfile} ."

                        //     sh "docker tag ${app_name}:${env.BUILD_ID} ${registry}/${app_name}:${env.BUILD_ID}"
                        //     sh "docker tag ${app_name}:${env.BUILD_ID} ${registry}/${app_name}:latest"

                        //     sh "docker push ${registry}/${app_name}:${env.BUILD_ID}"
                        //     sh "docker push ${registry}/${app_name}:latest"
                        // }
                    }
                }
            }
        }
    }
}
