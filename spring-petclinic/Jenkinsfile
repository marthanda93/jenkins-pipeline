pipeline {
    agent any
    stages {
        stage ('Clone') {
            steps {
                git url: 'https://github.com/spring-projects/spring-petclinic.git', branch: 'main'
            }
        }

        stage ('Initialize') {
            steps {
                sh '''
                    echo "PATH = ${PATH}"
                    echo "M2_HOME = ${M2_HOME}"
                '''
            }
        }

        stage ('Build') {
            steps {
                script {
                    try {
                        sh './mvnw package'
                    } catch (Exception e) {
                        echo 'Exception occurred: ' + e.toString()
                    }
                }
            }
        }

        stage ('Build App Image') {
            options { retry(3) }
            steps {
                script {
                    git url: 'https://github.com/marthanda93/jenkins-pipeline.git', branch: 'main'

                    // cleanup current user docker credentials
                    sh 'rm -f ~/.dockercfg ~/.docker/config.json || true'

                    withAWS(credentials: 'aws-credentials', region: 'us-east-1') {
                        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 169942349975.dkr.ecr.us-east-1.amazonaws.com
                        
                        def customImage = docker.build("petclinic:${env.BUILD_ID}", "./spring-petclinic/Dockerfile")
                        customImage.push()
                    }
                }
            }
        }
    }
}
